<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="RollingStats" needs-time-series-data="true" minver="2018d">
<author email="atecon@cryptolab.net">Artur Tarassow</author>
<version>0.1</version>
<date>2018-11-14</date>
<description>Rolling Time-Series Statistics</description>
<tags>C10</tags>
<label>Rolling Time-series Stats</label>
<menu-attachment>MAINWIN/Add</menu-attachment>
<help>
===============================
&quot;RollingStats&quot; -- Gretl package
===============================

Author: Artur Tarassow
Email: atecon@cryptolab.net
Web: https://sites.google.com/site/arturtarassow/

version history
****************
0.1: Nov., 2018
- initial public version


Public functions:
*****************
rolling_ts(): Rolling Univariate Time-series Statistics
-------------
+ This function allows the user to compute specific statistics
in either a 'rolling' (fixed, shifting window through time) or 'recursive'
(expanding window through time) manner.
+ In principle all -- both built-in as well as user-defined functions (UDF)
-- can be called which have a scalar value as its outcome.

rvec2series():
--------------
+ Transforms the resulting vector from rolling_ts() into a series

rolling_ts_gui():
---------------
+ Access rolling_ts() and rvec2series() through the GUI

-----------------
rolling_ts():
-----------------
INPUT:
series y: 		series which is used for computing some statistics
string op:		string, name of the function you want to call
int wsize[1::2]:	integer, size of the moving window (default 2 periods)
bool recursive[0]:	0: rolling-window (default), 1: recursive (expanding) window

OUTPUT: R by 1 matrix
+ Matrix includes the computed statistics for each of the R windows

-----------------
rvec2series():
-----------------
INPUT:
series y: 		series which is used for computing some statistics
matrix ret:		matrix, R by 1 vector comprising the computed statistics
int wsize[1::2]:	integer, size of the moving window (default 2 periods)
bool recursive[0]:	0: rolling-window (default), 1: recursive (expanding) window

OUTPUT: series
+ Series of rolling/ recursively computed statistics based in 'y'
correctly aligned with time

-----------------
rolling_ts_gui():
-----------------
INPUT:
series y: 		series which is used for computing some statistics
string op:		string, name of the function you want to call
int wsize[1::2]:	integer, size of the moving window (default 2 periods)
bool recursive[0]:	0: rolling-window (default), 1: recursive (expanding) window

OUTPUT: series
+ Series of rolling/ recursively computed statistics based in 'y'
correctly aligned with time
</help>
<gretl-function name="rolling_ts" type="matrix">
 <params count="4">
  <param name="y" type="series">
<description>Series of interest</description>
  </param>
  <param name="op" type="string">
<description>Name of the function to call</description>
  </param>
  <param name="wsize" type="int" min="1" default="2">
<description>Size of the moving window</description>
  </param>
  <param name="recursive" type="bool" default="0">
<description>Recursive (expanding) window (default 0, rolling window)</description>
  </param>
 </params>
<code># rolling_ts -- Rolling Time-series Statistics
smpl y --no-missing
scalar nsteps = nobs(y) - wsize + 1
matrix ret = zeros(nsteps,1)	# store results
smpl $t1 ($t1+wsize-1)
loop i=1..nsteps -q
  ret[i] = feval(op, y)	# call function
  if i&lt;nsteps
    if recursive==1
      smpl ; +1
    else
      smpl +1 +1
    endif
  endif
endloop
return ret
</code>
</gretl-function>
<gretl-function name="rvec2series" type="series">
 <params count="3">
  <param name="y" type="series">
<description>Series of interest</description>
  </param>
  <param name="ret" type="matrix">
<description>Computed vector</description>
  </param>
  <param name="wsize" type="int" min="1" default="2">
<description>Size of the moving window</description>
  </param>
 </params>
<code># transform 'ret' into series
smpl y --no-missing --replace
smpl ($t1+wsize-1) $t2
ret = vec(ret)
if nobs(y) != rows(ret)
  printf &quot;\nError: Vector 'm' has not the right length.\n&quot;
  funcerr &quot;Check whether the current sample is correctly specified.&quot;
endif
series S = ret
setinfo S --description=&quot;rolling_ts() statistics&quot;
setinfo S --graph-name=&quot;rolling_ts() statistics&quot;
return S
</code>
</gretl-function>
<gretl-function name="rolling_ts_gui" type="series" menu-only="1" pkg-role="gui-main">
 <params count="4">
  <param name="y" type="series">
<description>Select series of interest</description>
  </param>
  <param name="op" type="string">
<description>Name of the function</description>
  </param>
  <param name="wsize" type="int" min="1" default="2">
<description>Size of the moving window</description>
  </param>
  <param name="recursive" type="bool" default="0">
<description>Recursive window (default 'rolling')</description>
  </param>
 </params>
<code>series S = rvec2series(y, rolling_ts(y, op, wsize, recursive), wsize)
printf &quot;\n Series computed\n&quot;
return S
</code>
</gretl-function>
<sample-script>
set verbose off
include RollingStats.gfn --force

open denmark.gdt -q

scalar wsize = 22	# window lenght

# Skewness
matrix mSK = rolling_ts(LRM, &quot;skewness&quot;, wsize)
series SK = rvec2series(LRM, mSK, wsize)
print SK -o

# Minimum -- &quot;one-liner&quot;
series MIN = rvec2series(LRM, rolling_ts(LRM, &quot;min&quot;, wsize), wsize)
print MIN -o


# Call your own user-defined function
#-------------------------------------
# AR(1)-coefficient over time (w.o. intercept in the regression)
function scalar my_AR1 (const series y)
    ols y const y(-1) --quiet
    return $coeff[2]	# return AR(1) coeff.
end function 
# Call
matrix mbhat = rolling_ts(LRM, &quot;my_AR1&quot;, wsize, 0)
series bhat = rvec2series(LRM, mbhat, wsize)
gnuplot bhat --with-lines --time-series --output=display
</sample-script>
</gretl-function-package>
</gretl-functions>
