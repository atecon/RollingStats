set verbose off
clear
set assert stop

include "./src/RollingStats.inp"
include assertion.gfn


nulldata 3
series y = normal()
series y_wmiss = normal()
series y_wmiss[2] = NA
list L = y
list L_wmiss_1 = y_wmiss
list L_wmiss_2 = y y_wmiss

bundles Params = null
Params = Params + _(L = L, expected = FALSE)
Params = Params + _(L = L_wmiss_1, expected = TRUE)
Params = Params + _(L = L_wmiss_2, expected = TRUE)

function void test_data_has_missings (const bundles P, list L)
    print "Start testing function data_has_missings()."

    loop foreach i P
        # Given
        list y = P[i].L

        # When
        scalar actual = data_has_missings(y)

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_data_has_missings(Params, dataset)


nulldata 3

bundles Params = null
Params = Params + _(wsize = $nobs, expected = 1)
Params = Params + _(wsize = ($nobs - 1), expected = 2)
Params = Params + _(wsize = ($nobs + 1), expected = 47)


function void test_get_nsteps (const bundles P)
    print "Start testing function get_nsteps()."

    loop foreach i P
        # Given + When
        catch scalar actual = get_nsteps(P[i].wsize)
        error = $error

        # Then
        if !error
            assert(actual == P[i].expected)
        else
            assert(error == P[i].expected)
        endif
    endloop
end function
test_get_nsteps(Params)


open bikesharing.gdt --quiet
smpl time <= 21 --restrict --permanent
print obslabel($t1)
print obslabel($t2)

bundle B = rolling(casual, "mean", 7)
matrix results = B.results
print results






printf "\nInfo: All tests passed.\n"
