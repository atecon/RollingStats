set verbose off
clear
set assert stop

include "./src/RollingStats.inp"
include assertion.gfn

nulldata 3
series y = normal()
series y_wmiss = normal()
series y_wmiss[2] = NA

bundles Params = null
Params = Params + _(y = y, expected_error = FALSE)
Params = Params + _(y = y_wmiss, expected_error = TRUE)

function void test_data_has_missings (const bundles P, list L)
    print "Start testing function data_has_missings()."

    loop foreach i P
        # Given
        series y = P[i].y

        # When
        catch data_has_missings(y)
        scalar actual = $error

        # Then
        if P[i].expected_error
            assert(actual != FALSE)
        else
            assert(actual == P[i].expected_error)
        endif
    endloop
end function
test_data_has_missings(Params, dataset)


nulldata 3
bundles Params = null
Params = Params + _(wsize = $nobs, expected_error = 1)
Params = Params + _(wsize = ($nobs - 1), expected_error = 2)
Params = Params + _(wsize = ($nobs + 1), expected_error = 47)

function void test_get_nsteps (const bundles P)
    print "Start testing function get_nsteps()."

    loop foreach i P
        # Given + When
        catch scalar actual = get_nsteps(P[i].wsize)

        # Then
        if P[i].expected_error
            assert(actual != FALSE)
        else
            assert(actual == P[i].expected_error)
        endif
    endloop
end function
test_get_nsteps(Params)


open bikesharing.gdt --quiet

function void test_rolling_moving_window (const series y)
    print "Start testing function moving_stats() with moving window"

    # Given
    smpl time <= 3 --restrict
    scalar WSIZE = 2
    matrix expected_obsnum = {2, 3}
    strings expected_date = defarray("2011-01-02", "2011-01-03")
    matrix expected_values = {231; 125.5}

    # When
    bundle B = moving_stats(y, "mean", WSIZE)
    matrix actual_values = B.result
    matrix actual_obsnum = B.obsnum
    strings actual_date = rnameget(actual_values)

    # Then
    assert(nelem(actual_date) == nelem(expected_date))
    assert(nelem(actual_obsnum) == nelem(expected_obsnum))
    assert(nelem(actual_values) == nelem(expected_values))
    loop foreach i expected_date
        assert(actual_date[i] == "$i")
        assert(actual_obsnum[i] == expected_obsnum[i])
        assert(actual_values[i] == expected_values[i])
    endloop
end functioning
test_rolling_moving_window(casual)


function void test_rolling_expanding_window (const series y)
    print "Start testing function moving_stats() with expanding window"

    # Given
    smpl time <= 3 --restrict
    scalar EXPANDING = TRUE
    scalar WSIZE = 2
    matrix expected_obsnum = {2, 3}
    strings expected_date = defarray("2011-01-02", "2011-01-03")
    matrix expected_values = {231; 194}

    # When
    bundle B = moving_stats(y, "mean", WSIZE, EXPANDING)
    matrix actual_values = B.result
    matrix actual_obsnum = B.obsnum
    strings actual_date = rnameget(actual_values)

    # Then
    assert(nelem(actual_date) == nelem(expected_date))
    assert(nelem(actual_obsnum) == nelem(expected_obsnum))
    assert(nelem(actual_values) == nelem(expected_values))
    loop foreach i expected_date
        assert(actual_date[i] == "$i")
        assert(actual_obsnum[i] == expected_obsnum[i])
        assert(actual_values[i] == expected_values[i])
    endloop
end function
test_rolling_expanding_window(casual)


## Series return type
open bikesharing.gdt --quiet

function void test_movstats (const series y)
    print "Start testing function movstats() with moving window"

    # Given
    smpl time <= 3 --restrict
    scalar WSIZE = 2
    matrix expected_obsnum = {2, 3}
    strings expected_date = defarray("2011-01-02", "2011-01-03")
    series expected_values = {NA; 231; 125.5}

    # When
    series actual_values = movstats(y, "mean", WSIZE)

    # Then
    assert(nobs(actual_values) == sum(ok(expected_values)))
    loop foreach i expected_values
        if ok(expected_values[i])
            assert(actual_values[i] == expected_values[i])
        else
            assert(ok(actual_values[i]) == ok(expected_values[i]))
        endif
    endloop
end functioning
test_movstats(casual)



# Example without obslabels
nulldata 10
setobs 1 1 --time-series
series y = normal()
bundle B = moving_stats(y, "mean", 2)
matrix actual_values = B.result
strings actual_date = rnameget(actual_values)

## Vector to series: restrict to right sample
smpl B.obsnum[1] B.obsnum[end]
series y_movmean = actual_values
print y y_movmean -o


# Example with observation labels
open bikesharing.gdt --quiet
smpl time <= 10 --restrict --permanent
bundle B = moving_stats(casual, "mean", 2)
matrix actual_values = B.result
strings actual_date = rnameget(actual_values)

## Vector to series: restrict to right sample
smpl B.obsnum[1] B.obsnum[end]
series y_movmean = actual_values
print casual y_movmean -o



# Call your own user-defined function which returns a scalar value
# AR(1)-coefficient over time (w.o. intercept in the regression)
open denmark --quiet
function scalar my_AR1 (const series y)
    ols y const y(-1) --quiet
    return $coeff[2]    # return AR(1) coefficient only
end function

scalar EXPANDING = TRUE
scalar WSIZE = 10                # set window length
bundle B = moving_stats(LRM, "my_AR1", WSIZE, EXPANDING)

# Vector to series
smpl B.obsnum[1] B.obsnum[end]  # select relevant sample
series bhat = B.result



printf "\nInfo: All tests passed.\n"
