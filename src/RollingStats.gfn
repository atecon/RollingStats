<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="RollingStats" needs-time-series-data="true" minver="2021c">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>1.0</version>
<date>2023-02-04</date>
<description>Compute moving-window statistics</description>
<tags>C10</tags>
<label>Moving time-series statistics</label>
<menu-attachment>MAINWIN/Add</menu-attachment>
<help>
This package is for computing statistics in a moving-window manner. Currently
only time-series datasets are supported.

Please ask questions and report bugs on the gretl mailing list if possible.
Alternatively, create an issue ticket on the github repo (see below).
Source code and test script(s) can be found here:
https://github.com/atecon/RollingStats

GUI usage
==========
You can reach the GUI functionality via the menu entry
&quot;Add -&gt; Moving time-series statistics&quot;.


Public functions
=================

movstats (const series y, const string operation, const int wsize[1::2],
          const bool expanding[FALSE])
-------------------------------------------------------------------
This function computes some requested statistics in either a 'rolling'
(fixed, shifting window through time) or expanding window through time manner.

Input:
------
y:           series, Target for which to compute the statistics
operation:   string, Name of the function to call
wsize:       int, Fixed number of observations used for each window
             (optional, default = 2)
expanding:   bool, Window function where 0(=FALSE) refers to a
             rolling-window (default) and 1 (=TRUE) to an expanding window

Return:
Series of moving-window statistics.
====================================================================



moving_stats (const series y, const string operation, const int wsize[1::2],
              const bool expanding[FALSE])
-------------------------------------------------------------------
This function computes some requested statistics in either a 'rolling'
(fixed, shifting window through time) or expanding window through time manner.

Input:
------
y:           series, Target for which to compute the statistics
operation:   string, Name of the function to call
wsize:       int, Fixed number of observations used for each window
             (optional, default = 2)
expanding:   bool, Window function where 0(=FALSE) refers to a
             rolling-window (default) and 1 (=TRUE) to an expanding window

Return:
Bundle holding the following objects (among the input parameters):
  date:   String array holding the observation label for each window
          considered. Each value refers to the last observation date used for
          computation.
  nsteps: Number of windows used for estimation.
  obsnum: Column vector holding the observation identifiers for each window
          considered. Each value refers to the last observation used for
          computation.
  result: Either a matrix or a matrix array. Both are of length R where R
          refers to the number of windows used for estimation. The returned
          matrix may have k columns if the the requested operation returns a
          vector of length k.
  T:      Number of observations of the underlying sample
====================================================================


Changelog
==========
1.0: February 2023
+ Completely new user-interface
+ Only single series can be passed to the main function
+ Internal refactoring

0.9: April 2021
+ Changed user-interface
    - Replace rolling_ts() function by the new functions moving_stats()
      and moving_stats_array(), respectively.
    - Remove first unnecessary argument of rvec2series() function.
    - Internal improvements

0.2: Jan., 2019
+ Work on rolling_ts():
	- 'y' can be a list of series now
	- the output matrix can be a matrix of size R by n
	instead of R by 1
	- the user may provide a matrix array in pointer form
	for storing multiple matrices returned by some
	user-defined function
	+ update the sample script and manual script accordingly

0.1: Nov., 2018
+ initial public version
</help>
<gretl-function name="moving_stats" type="bundle">
 <params count="4">
  <param name="y" type="series" const="true">
<description>Target series</description>
  </param>
  <param name="operation" type="string" const="true">
<description>Function to call</description>
  </param>
  <param name="wsize" type="int" min="1" default="2" const="true">
<description>Length of the window</description>
  </param>
  <param name="expanding" type="bool" default="0">
<description>Do expanding window</description>
  </param>
 </params>
<code>/* Public function for computing moving statistics. */
bundle self = _(T = $nobs, operation, wsize, expanding)
data_has_missings(y)
self.nsteps = get_nsteps(self.wsize)
compute_moving_stats(y, &amp;self)
return self
</code>
</gretl-function>
<gretl-function name="movstats" type="series" pkg-role="gui-main">
 <params count="4">
  <param name="y" type="series" const="true">
<description>Target series</description>
  </param>
  <param name="operation" type="string" const="true">
<description>Function name</description>
  </param>
  <param name="wsize" type="int" min="1" default="2">
<description>Window length</description>
  </param>
  <param name="expanding" type="bool" default="0" const="true">
<description>Expanding window?</description>
  </param>
 </params>
<code>/* Wrapper returning series and also used for GUI access related
function calling actual public function. */
  bundle B = moving_stats(y, operation, wsize, expanding)
  smpl B.obsnum[1] B.obsnum[end]
  series ret = B.result
  print &quot;Series successfully computed.&quot;
  smpl full
  string wtype = expanding == TRUE ? &quot;Expanding&quot; : &quot;Rolling&quot;
  string desc = sprintf(&quot;%s %s (length = %d) of %s&quot;, wtype, operation, wsize, argname(y))
  setinfo ret --description=&quot;@desc&quot;
  setinfo ret --graph-name=&quot;@desc&quot;
  return ret
</code>
</gretl-function>
<gretl-function name="data_has_missings" type="void" private="1">
 <params count="1">
  <param name="y" type="series" const="true"/>
 </params>
<code>/* Check for missing values. */
scalar has_missings = sum(missing(y))
if has_missings
  print &quot;ERROR: series has missing values. Remove first.&quot;
  funcerr &quot;Try the command 'smpl &lt;NAME_OF_SERIES&gt; --contiguous' before calling moving_stats().&quot;
endif
</code>
</gretl-function>
<gretl-function name="get_nsteps" type="scalar" private="1">
 <params count="1">
  <param name="wsize" type="int" const="true"/>
 </params>
<code>/* Compute number of iterations. */
nsteps = $nobs - wsize + 1
errorif(nsteps &lt;= 0, &quot;Not enough observations for selected window length.&quot;)
return nsteps
</code>
</gretl-function>
<gretl-function name="compute_moving_stats" type="bundle" private="1">
 <params count="2">
  <param name="y" type="series" const="true"/>
  <param name="self" type="bundleref"/>
 </params>
<code>/*  Actual computation is done here. */
smpl $t1 ($t1 + self.wsize - 1)
strings self.date = array(self.nsteps)
matrix self.obsnum = mshape(NA, self.nsteps)
loop i=1..self.nsteps
  out = feval(self.operation, y)
  self.date[i] = obslabel($t2)
  self.obsnum[i] = $t2
  if i == 1
    string dtype = typestr(typeof(out))
    if dtype == &quot;matrix&quot;
      matrix self.result = mshape(NA, self.nsteps, vec(rows(out)))
    elif dtype ==  &quot;scalar&quot;
      matrix self.result = mshape(NA, self.nsteps, 1)
    elif dtype == &quot;array&quot;
      matrices self.result = array(nelem(out))
    else
      funcerr &quot;Operation returned unsupported datatype.&quot;
    endif
  endif
  if dtype == &quot;array&quot;
    loop j=1..nelem(out)
      self.result[j] = out[j]'      # concatenate each array element
    endloop
  elif dtype == &quot;matrix&quot; || dtype == &quot;scalar&quot;
    self.result[i,] = vec(out)'
  endif
  if i &lt; self.nsteps
    if self.expanding
      smpl ; +1
    else
      smpl +1 +1
    endif
  endif
endloop
rnameset(self.result, self.date)
return self
</code>
</gretl-function>
<sample-script>
clear
set verbose off

include RollingStats.gfn
open denmark.gdt -q		# load some time-series dataset

RUN_EXAMPLE = 1

if RUN_EXAMPLE == 1             # moving_stats-window case
    series input = diff(LRM)
    smpl input --contiguous     # avoid missing values

    scalar WSIZE = 22           # set window length
    series y = movstats(input, &quot;mean&quot;, WSIZE)
    print input y -o

elif RUN_EXAMPLE == 2  # moving_stats-window case
    series input = diff(LRM)
    smpl input --contiguous    # avoid missing values

    scalar WSIZE = 22                # set window length
    bundle B = moving_stats(input, &quot;mean&quot;, WSIZE)
    print B

    # Vector to series
    smpl B.obsnum[1] B.obsnum[end]  # select relevant sample
    series y = B.result
    print input y -o

elif RUN_EXAMPLE == 2  # expanding window
    series input = diff(LRM)
    smpl input --contiguous    # avoid missing values

    scalar EXPANDING = TRUE
    scalar WSIZE = 5                # set window length
    bundle B = moving_stats(input, &quot;mean&quot;, WSIZE, EXPANDING)
    print B

    # Vector to series
    smpl B.obsnum[1] B.obsnum[end]  # select relevant sample
    series y = B.result
    print input y -o

elif RUN_EXAMPLE == 3
    # Call your own user-defined function which returns a scalar value
    # of the AR(1)-coefficient over time (w.o. intercept in the regression)
    function scalar my_AR1 (const series y)
        ols y const y(-1) --quiet
        return $coeff[2]	# return AR(1) coefficient only
    end function

    scalar EXPANDING = TRUE
    scalar WSIZE = 10                # set window length
    bundle B = moving_stats(LRM, &quot;my_AR1&quot;, WSIZE, EXPANDING)

    # Vector to series
    smpl B.obsnum[1] B.obsnum[end]  # select relevant sample
    series bhat = B.result
    gnuplot bhat --with-lines --time-series --output=display

elif RUN_EXAMPLE == 4
    # Call your own user-defined function which returns a matrix
    # of coefficients over time
    function matrix my_AR1 (const series y)
        ols y const y(-1) --quiet
        return $coeff
    end function

    scalar EXPANDING = TRUE
    scalar WSIZE = 10                # set window length
    bundle B = moving_stats(LRM, &quot;my_AR1&quot;, WSIZE, EXPANDING)

    # Vector to series
    smpl B.obsnum[1] B.obsnum[end]  # select relevant sample
    series bconst = B.result[,1]
    series bar1 = B.result[,2]
    gnuplot bconst bar1 --with-lines --time-series --output=display
endif
</sample-script>
</gretl-function-package>
</gretl-functions>
