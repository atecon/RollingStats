function void data_has_missings (const numeric y)
    /* Check for missing values. */

    scalar has_missings = sum(missing(y))
    errorif(has_missings != FALSE, "ERROR: series has missing values. Remove first.")
end function


function scalar get_nsteps (const int wsize)
    /* Compute number of iterations. */

    nsteps = $nobs - wsize + 1
    errorif(nsteps <= 0, "Not enough observations for selected window length.")

    return nsteps
end function


function bundle moving_stats (const numeric y,
                              const string operation "Function to call",
                              const int wsize[1::2] "Length of the window",
                              bool expanding[FALSE] "Do expanding window")
    /* Public function for computing moving statistics. */

    errorif(typename(y) != "series" && typename(y) != "list",
            "Target series must be either of type 'series' or 'list'.")

    bundle self = _(T = $nobs, operation, wsize, expanding)
    data_has_missings(y)

    self.nsteps = get_nsteps(self.wsize)
    compute_moving_stats(y, &self)

    return self
end function


function bundle compute_moving_stats (const numeric y,
                                      bundle *self)
    /*  Actual computation is done here. */

    scalar last_obs = $t1 + self.wsize - 1
    smpl $t1 last_obs
    strings self.date = array(self.nsteps)
    matrix self.obsnum = mshape(NA, self.nsteps)

    loop i=1..self.nsteps
        out = feval(self.operation, y)
        self.date[i] = obslabel($t2)
        self.obsnum[i] = $t2

        if i == 1
            string dtype = typestr(typeof(out))

            if dtype == "matrix"
                matrix self.result = mshape(NA, self.nsteps, vec(rows(out)))
            elif dtype ==  "scalar"
                matrix self.result = mshape(NA, self.nsteps, 1)
            elif dtype == "array"
                matrices self.result = array(nelem(out))
            else
                funcerr "Operation returned unsupported datatype."
            endif
        endif

        if dtype == "array"
            loop j=1..nelem(out)
                self.result[j] = out[j]'      # concatenate each array element
            endloop
        elif dtype == "matrix" || dtype == "scalar"
            self.result[i,] = vec(out)'
        endif

        if i < self.nsteps
            if self.expanding
                smpl ; +1
            else
                smpl +1 +1
            endif
        endif
    endloop

    rnameset(self.result, self.date)

    return self
end function


function series movstats (const numeric y,
                          const string operation "Function name",
                          int wsize[1::2] "Window length",
                          const bool expanding[0] "Expanding window?")
    /* Wrapper returning series and also used for GUI access related
      function calling actual public function. */

    bundle B = moving_stats(y, operation, wsize, expanding)

    smpl B.obsnum[1] B.obsnum[end]
    series ret = B.result
    print "Series successfully computed."

    string wtype = expanding == TRUE ? "Expanding" : "Rolling"
    string desc = sprintf("%s %s (length = %d) of %s",
                          wtype, operation, wsize, argname(y))
    setinfo ret --description="@desc"
    setinfo ret --graph-name="@desc"

    return ret
end function

/*
   function matrix skew (matrix X)
   # URL: http://de.mathworks.com/help/stats/skewness.html?requestedDomain=www.mathworks.com

   matrix xbar = X.-meanc(X)
   scalar A = 1/rows(X) .* sumc(xbar.^3)
   scalar B = ( sqrt(1/rows(X) .* sumc(xbar.^2) )).^3
   scalar S1 = A/B
   scalar S0a = sqrt(rows(X)*(rows(X)-1))
   scalar S0b = rows(X)-2
   S0 = S0a*S1/S0b				# bias-corrected formula, ==gretl's default

   return S0~S1
   end function
*/
